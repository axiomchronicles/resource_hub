"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

AUTH_USER_MODEL = "Authentication.User"
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7xfz6^5@0k%-)^c&ga@6*m_ii%wc)4rx9mdf%bjxpkth)^$$3u'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

CSRF_COOKIE_HTTPONLY = False   # allow JS to read cookie (important for React)

ALLOWED_HOSTS = []

SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = "ALLOWALL"  # ⚠️ global setting (be careful)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "rest_framework",
    "Authentication",
    "Resources",
    "corsheaders",
    "rest_framework_simplejwt",
    "rest_framework.authtoken",  # enable token model
    "rest_framework_simplejwt.token_blacklist",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"  

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
DEFAULT_FROM_EMAIL = "embrakeproject@gmail.com"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "embrakeproject@gmail.com"
EMAIL_HOST_PASSWORD = "jkohyutipglocgck"

# optional: lock down profile upload size & allowed ext
MAX_PROFILE_PIC_SIZE = 10 * 1024 * 1024
ALLOWED_PROFILE_EXT = {"jpg", "jpeg", "png", "webp", "gif"}
IMAGE_MAX_DIM = 1024

# OTP and mail config
OTP_EXPIRES_MINUTES = 10
OTP_MAX_PER_USER_PER_HOUR = 5
OTP_MAX_PER_SESSION = 5
MAIL_RETRY_ATTEMPTS = 3
MAIL_RETRY_DELAY_SECONDS = 0.5

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SESSION_ENGINE = "django.contrib.sessions.backends.db"

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_PARSER_CLASSES": (
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
        "rest_framework.parsers.JSONParser",
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
            "rest_framework.authentication.TokenAuthentication",
        # add other auth classes if needed
    ),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "10/min",
        "user": "120/min",
        # scoped:
        "uploads_burst": "30/min",
        "uploads_sustained": "200/day",
    },
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",  # for dev
        # For prod use redis: django_redis.cache.RedisCache
        # "LOCATION": "redis://127.0.0.1:6379/1",
    }
}

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

from datetime import timedelta
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),   # adjust
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "ALGORITHM": "HS256",
    "USER_ID_FIELD": "id",
    # Claim name in the JWT token payload
    "USER_ID_CLAIM": "user_id",
    # you may also set SIGNING_KEY explicitly; by default SECRET_KEY is used
}

# File/Upload policy
UPLOAD_ALLOWED_MIME = {
    "application/pdf",
    "application/vnd.ms-powerpoint",
    "application/vnd.openxmlformats-officedocument.presentationml.presentation",
    "application/msword",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
}
UPLOAD_MAX_BYTES = 50 * 1024 * 1024  # 50MB
UPLOAD_TMP_ROOT = "tmp" 


AUTH_REFRESH_TOKEN_IN_COOKIE = True
AUTH_REFRESH_COOKIE_NAME = "refresh_token"
AUTH_REFRESH_COOKIE_PATH = "/"
AUTH_REFRESH_COOKIE_DOMAIN = None  # set when using different domain
AUTH_REFRESH_COOKIE_MAX_AGE = 60 * 60 * 24 * 14  # 14 days
AUTH_REFRESH_COOKIE_SAMESITE = "Lax"  # or "Strict" / "None" if cross-site + secure
AUTH_RETURN_TOKENS_IN_BODY = False  # set True for non-cookie legacy clients


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,  # keep Django's default loggers
    "handlers": {
        "console": {
            "level": "DEBUG",   # show debug, info, warnings, errors
            "class": "logging.StreamHandler",
            "stream": sys.stdout,  # print to terminal
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
    "loggers": {
        "django": {  # Django’s own logs
            "handlers": ["console"],
            "level": "INFO",   # reduce noise (set DEBUG if you want SQL queries too)
            "propagate": False,
        },
        "Authentication": {  # replace with your app name if you want app-specific logs
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8080",   # your React dev server
    "http://127.0.0.1:8080",   # sometimes React serves here too
    "http://localhost:3000",   # if you also use CRA
]

SESSION_COOKIE_SAMESITE = "None"
SESSION_COOKIE_SECURE = True   # required if using SameSite=None (needs HTTPS in prod)
CSRF_COOKIE_SAMESITE = "None"
CSRF_COOKIE_SECURE = True

CSP_FRAME_ANCESTORS = ["'self'", "http://localhost:8080", "http://127.0.0.1:8080"]